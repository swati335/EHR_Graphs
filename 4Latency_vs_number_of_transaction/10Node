import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.ticker as ticker
import numpy as np


mpl.rcParams['font.family'] = 'Times New Roman'
mpl.rcParams['font.size'] = 12
mpl.rcParams['font.weight'] = 'bold'
mpl.rcParams['lines.linewidth'] = 1.5

# Configuration
base_dir = 'Get'
algorithms = ['Clique', 'IBFT', 'QBFT']
transactions = ['1000', '2000', '3000', '4000', '5000']
node = '10 Nodes'

# Dictionary to hold latency data
latency_data = {algo: [] for algo in algorithms}

# Loop to gather latency values for node = 10
for algo in algorithms:
    for txn in transactions:
        folder_path = os.path.join(base_dir, node, algo)
        latency = None
        for file in os.listdir(folder_path):
            if file.endswith('.csv') and txn in file:
                df = pd.read_csv(os.path.join(folder_path, file))
                latency = df['Latency(ms)'].max()
                break
        latency_data[algo].append(latency)

# Plotting

def power_formatter(x, pos):
    if x is None or np.isnan(x) or x == 0:
        return "0"
    exponent = int(np.floor(np.log10(abs(x))))
    coefficient = x / (10 ** exponent)
    return f'{coefficient:.1f}×10^{exponent}'

plt.figure(figsize=(5, 4))
scaling_factor = 1e5
for algo in algorithms:
    y_vals = [y / scaling_factor if y is not None else None for y in latency_data[algo]]
    plt.plot([int(txn) for txn in transactions], y_vals,linestyle='--', marker='o', label=algo,zorder=2)


#plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(power_formatter))

plt.title(f'Max Latency vs Number of Transactions ({node})',fontsize=12, fontweight='bold')
plt.xlabel('Number of Transactions',fontsize=12, fontweight='bold')
plt.ylabel('Max Latency (×10⁵ ms)',fontsize=12, fontweight='bold')
legend=plt.legend(title='Algorithm',loc='upper left',
    fontsize=10,
    title_fontsize=10,
    frameon=True,
    # borderpad=1.0
    )
legend.set_zorder(1.5)
plt.grid(True,linestyle='--')
plt.xlim(900, 5100)
plt.xticks(range(1000, 6000, 1000))
plt.tight_layout()
plt.show()
